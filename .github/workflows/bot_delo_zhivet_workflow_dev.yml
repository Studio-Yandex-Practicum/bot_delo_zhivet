name: Deploy on dev server

on:
  push:
    branches:
      - test_server
#      - feature/workflow_update

env:
    BRANCH: 'refs/heads/develop'
#    BRANCH: 'refs/heads/feature/workflow_update'
    PROJECT_FOLDER_PATH: ~/${{ vars.PROJECT_FOLDER_NAME }}

jobs:
  # tests:
  #   name: Testing
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       python-version: [ "3.10", "3.11" ]

  #   steps:
  #     - name: Checkout the repo
  #       uses: actions/checkout@v3

  #     - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python-version }}

  #     - name: Install poetry
  #       run: |
  #         pip install pipx
  #         pipx install poetry==1.3.2 --force

  #     - name: Validate the structure of the pyproject.toml
  #       run: |
  #         poetry check

  #     - name: Verify that poetry.lock is consistent with pyproject.toml
  #       run: poetry lock --check

  #     - name: Install dependencies
  #       run: |
  #         poetry install --with test

  #     - name: Test with flake8 - bot
  #       run: |
  #         poetry run python -m flake8

  # build_and_push_to_docker_hub:
  #   name: Build and push Docker image to Docker Hub
  #   runs-on: ubuntu-latest
  #   # needs: tests

  #   steps:
  #     - name: Checkout the repo
  #       uses: actions/checkout@v3

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v2

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Docker meta delo_zhivet_bot_and_admin
  #       id: meta_bot_and_admin
  #       uses: docker/metadata-action@v4
  #       with:
  #         images: ${{ secrets.DEV_DOCKERHUB_USERNAME }}/delo_zhivet_bot_and_admin

  #     - name: Docker meta delo_zhivet_nginx
  #       id: meta_nginx
  #       uses: docker/metadata-action@v4
  #       with:
  #         images: ${{ secrets.DEV_DOCKERHUB_USERNAME }}/delo_zhivet_nginx

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DEV_DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DEV_DOCKERHUB_TOKEN }}

      # - name: Build and push a bot&admin image to Docker Hub
      #   # if: github.ref == env.BRANCH
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: .
      #     file: Dockerfile_bot_admin
      #     no-cache: true
      #     push: ${{ github.event_name == 'push' }}
      #     tags: ${{ steps.meta_bot_and_admin.outputs.tags }}
      #     labels: ${{ steps.meta_bot_and_admin.outputs.labels }}

      # - name: Build and push a nginx image to Docker Hub
      #   # if: github.ref == env.BRANCH
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: ./infrastructure/nginx
      #     file: ./infrastructure/nginx/Dockerfile_nginx
      #     no-cache: true
      #     build-args: |
      #       NGINX_CONFIG=default.conf
      #     push: ${{ github.event_name == 'push' }}
      #     tags: ${{ steps.meta_nginx.outputs.tags }}
      #     labels: ${{ steps.meta_nginx.outputs.labels }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    # needs: build_and_push_to_docker_hub
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3

      # - name: stop all containers
      # # if: github.ref == env.BRANCH
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.DEV_SERVER_HOST }}
      #     username: ${{ secrets.DEV_SERVER_USER }}
      #     key: ${{ secrets.DEV_SERVER_SSH_KEY }}
      #     passphrase: ${{ secrets.DEV_SERVER_PASSPHRASE }}
      #     script: |
      #       cd ${{ env.PROJECT_FOLDER_PATH }}
      #       cd docker_compose_files
      #       docker compose -f docker-compose-local-images.yaml stop


      - name: Copy files for deploy
        # if: github.ref == env.BRANCH
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.DEV_SERVER_HOST }}
          username: ${{ secrets.DEV_SERVER_USER }}
          key: ${{ secrets.DEV_SERVER_SSH_KEY }}
          passphrase: ${{ secrets.DEV_SERVER_PASSPHRASE }}
          source: "infrastructure/*,!infrastructure/archive/*,!infrastructure/nginx/delo.conf,!infrastructure/.env.examples/*"
          target: ${{ env.PROJECT_FOLDER_PATH }}
          overwrite: true
          strip_components: 1

      - name: Copy file for nginx
        # if: github.ref == env.BRANCH
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DEV_SERVER_HOST }}
          username: ${{ secrets.DEV_SERVER_USER }}
          key: ${{ secrets.DEV_SERVER_SSH_KEY }}
          passphrase: ${{ secrets.DEV_SERVER_PASSPHRASE }}
          source: "infrastructure/nginx"
          target: ${{ env.PROJECT_FOLDER_PATH }}/nginx
          overwrite: true

      - name: Executing remote ssh commands to deploy
        # if: github.ref == env.BRANCH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_SERVER_HOST }}
          username: ${{ secrets.DEV_SERVER_USER }}
          key: ${{ secrets.DEV_SERVER_SSH_KEY }}
          passphrase: ${{ secrets.DEV_SERVER_PASSPHRASE }}
          script: |

            cd ${{ env.PROJECT_FOLDER_PATH }}
            cd docker_compose_files
            # docker compose -f docker-compose-local-images.yaml stop
            # docker compose -f docker-compose-local-images.yaml rm -fs web
            # docker compose -f docker-compose-local-images.yaml rm -fs bot
            # docker compose -f docker-compose-local-images.yaml rm -fs nginx
            # docker image rm -f ${{ secrets.DEV_DOCKERHUB_USERNAME }}/delo_zhivet_bot_and_admin:${{ vars.DEV_DOCKER_TAG }}
            # docker image rm -f ${{ secrets.DEV_DOCKERHUB_USERNAME }}/delo_zhivet_nginx:${{ vars.DEV_DOCKER_TAG }}
            docker image pull -q ${{ secrets.DEV_DOCKERHUB_USERNAME }}/delo_zhivet_bot_and_admin:${{ vars.DEV_DOCKER_TAG }}
            docker image pull -q ${{ secrets.DEV_DOCKERHUB_USERNAME }}/delo_zhivet_nginx:${{ vars.DEV_DOCKER_TAG }}
            
            cd ..
            mkdir .env_files
            cd .env_files
            rm .env.db
            touch .env.db
            echo POSTGRES_DB=${{ secrets.DEV_POSTGRES_DB }} >> .env.db
            echo POSTGRES_USER=${{ secrets.DEV_POSTGRES_USER }} >> .env.db
            echo POSTGRES_PASSWORD=${{ secrets.DEV_POSTGRES_PASSWORD }} >> .env.db
            echo DB_HOST=${{ secrets.DEV_DB_HOST }} >> .env.db
            echo DB_PORT=${{ secrets.DEV_DB_PORT }} >> .env.db
            rm .env.flask
            touch .env.flask
            echo FLASK_APP=${{ secrets.DEV_FLASK_APP }} >> .env.flask
            echo FLASK_DEBUG=${{ secrets.DEV_FLASK_DEBUG }} >> .env.flask
            echo FLASK_ENV=${{ secrets.DEV_FLASK_ENV }} >> .env.flask
            echo SUPER_USER_LOGIN=${{ secrets.DEV_SUPER_USER_LOGIN }} >> .env.flask
            echo SUPER_USER_EMAIL=${{ secrets.DEV_SUPER_USER_EMAIL }} >> .env.flask
            echo SUPER_USER_PASSWORD=${{ secrets.DEV_SUPER_USER_PASSWORD }} >> .env.flask
            echo ADMIN_SECRET_KEY=${{ secrets.DEV_ADMIN_SECRET_KEY }} >> .env.flask
            rm .env.mail
            touch .env.mail
            echo PASSWORD_RESET_TOKEN_TTL=${{ secrets.DEV_PASSWORD_RESET_TOKEN_TTL }} >> .env.mail
            echo PASSWORD_RESET_TOKEN_ALGORITHM=${{ secrets.DEV_PASSWORD_RESET_TOKEN_ALGORITHM }} >> .env.mail
            echo MAIL_SERVER=${{ secrets.DEV_MAIL_SERVER }} >> .env.mail
            echo MAIL_PORT=${{ secrets.DEV_MAIL_PORT }} >> .env.mail
            echo MAIL_USE_SSL=${{ secrets.DEV_MAIL_USE_SSL }} >> .env.mail
            echo MAIL_USERNAME=${{ secrets.DEV_MAIL_USERNAME }} >> .env.mail
            echo MAIL_PASSWORD=${{ secrets.DEV_MAIL_PASSWORD }} >> .env.mail
            echo MAIL_DEBUG=${{ secrets.DEV_MAIL_DEBUG }} >> .env.mail
            rm .env.sentry
            touch .env.sentry
            echo SENTRY_DSN_ADMIN=${{ secrets.DEV_SENTRY_DSN_ADMIN }} >> .env.sentry
            echo SENTRY_DSN_BOT=${{ secrets.DEV_SENTRY_DSN_BOT }} >> .env.sentry
            rm .env.telegram
            touch .env.telegram
            echo TELEGRAM_BOT_TOKEN=${{ secrets.DEV_TELEGRAM_BOT_TOKEN }} >> .env.telegram
            echo HOST=${{ secrets.DEV_HOST }} >> .env.telegram
            echo WEBHOOK_PATH=${{ secrets.DEV_WEBHOOK_PATH }} >> .env.telegram
            # echo WEBHOOK_DOMAIN=${{ secrets.DEV_WEBHOOK_DOMAIN }} >> .env.telegram
            # echo WEBHOOK_PORT=${{ secrets.DEV_WEBHOOK_PORT }} >> .env.telegram
            rm .env.s3
            touch .env.s3
            echo AWS_ACCESS_KEY_ID=${{ secrets.DEV_AWS_ACCESS_KEY_ID }} >> .env.s3
            echo AWS_SECRET_ACCESS_KEY=${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }} >> .env.s3
            echo AWS_SERVICE_NAME=${{ secrets.DEV_AWS_SERVICE_NAME }} >> .env.s3
            echo AWS_ENDPOINT_URL=${{ secrets.DEV_AWS_ENDPOINT_URL }} >> .env.s3
            echo AWS_BUCKET_NAME=${{ secrets.DEV_AWS_BUCKET_NAME }} >> .env.s3
            rm .env.yatracker
            touch .env.yatracker
            echo OAUTH_TOKEN=${{ secrets.DEV_OAUTH_TOKEN }} >> .env.yatracker
            echo ORG_ID=${{ secrets.DEV_ORG_ID }} >> .env.yatracker
            rm .env.geocoder
            touch .env.geocoder
            echo GEOCODER_APIKEY=${{ secrets.DEV_GEOCODER_APIKEY }} >> .env.geocoder
            echo GEOCODER_BASE_URL=${{ secrets.DEV_GEOCODER_BASE_URL }} >> .env.geocoder
            echo MAXIMUM_OBJECTS_FROM_GEOCODER=${{ secrets.DEV_MAXIMUM_OBJECTS_FROM_GEOCODER }} >> .env.geocoder
            rm .env.dadata
            touch .env.dadata
            echo DADATA_TOKEN=${{ secrets.DEV_DADATA_TOKEN }} >> .env.dadata
            echo DADATA_SECRET=${{ secrets.DEV_DADATA_SECRET }} >> .env.dadata
            rm .env.redis
            touch .env.redis
            echo REDIS_HOST=redis >> .env.redis
            echo REDIS_PORT=6379 >> .env.redis
            rm .env
            touch .env
            echo HOST_NAME=${{ secrets.DEV_HOST_NAME }} >> .env
            echo CERTBOT_EMAIL=${{ secrets.DEV_CERTBOT_EMAIL }} >> .env
            echo PROJECT_FOLDER_PATH=${{ env.PROJECT_FOLDER_PATH }} >> .env
            echo RELOAD_NGINX_CONFIG=${{ vars.RELOAD_NGINX_CONFIG }} >> .env
            echo DOCKER_TAG=${{ vars.DEV_DOCKER_TAG }} >> .env
            rm .env.nginx
            touch .env.nginx
            echo HOST_NAME=${{ secrets.DEV_HOST_NAME }} >> .env.nginx
            echo CERTBOT_EMAIL=${{ secrets.DEV_CERTBOT_EMAIL }} >> .env.nginx
            
            cd ..
            cd ..

            # chmod +x update_nginx_conf.sh
            # . ./update_nginx_conf.sh
            # docker compose -f docker-compose-local-images.yaml up -d
            # chmod +x update_certificate.sh
            # . ./update_certificate.sh
            # docker compose -f docker-compose-local-images.yaml exec bot alembic upgrade head
            # docker compose -f docker-compose-local-images.yaml exec web python admin/manage.py collectstatic --static_folder static --overwrite
